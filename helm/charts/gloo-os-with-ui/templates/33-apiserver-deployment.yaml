{{- if .Values.apiServer.enable }}
{{- $apiServerImage := .Values.apiServer.deployment.server.image }}
{{- $uiImage := .Values.apiServer.deployment.ui.image }}
{{- $envoy := .Values.apiServer.deployment.envoy }}
{{- $envoyImage := .Values.apiServer.deployment.envoy.image }}
{{- $statsConfig := coalesce .Values.apiServer.deployment.stats .Values.global.glooStats -}}
{{- if .Values.global  }}
{{- $apiServerImage = merge .Values.apiServer.deployment.server.image .Values.global.image }}
{{- $uiImage = merge .Values.apiServer.deployment.ui.image .Values.global.image }}
{{- $envoyImage = merge .Values.apiServer.deployment.envoy.image .Values.global.image }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: {{ .Release.Namespace }}
  labels:
    app: gloo
    gloo: {{ .Values.apiServer.service.name }}
spec:
{{- if not (kindIs "invalid" .Values.apiServer.deployment.replicas) }}
  replicas: {{ .Values.apiServer.deployment.replicas }}
{{- end }}
  selector:
    matchLabels:
      app: gloo
      gloo: {{ .Values.apiServer.service.name }}
  template:
    metadata:
      labels:
        app: gloo
        gloo: {{ .Values.apiServer.service.name }}
        {{- if .Values.apiServer.deployment.extraApiServerLabels }}
        {{- range $key, $value := .Values.apiServer.deployment.extraApiServerLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      {{- if $statsConfig.enabled }}
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      {{- end}}
    spec:
      serviceAccountName: {{ .Values.apiServer.service.name }}
      securityContext:
        runAsNonRoot: true
        {{- if not .Values.apiServer.deployment.floatingUserId }}
        runAsUser: {{ printf "%.0f" (float64 .Values.apiServer.deployment.runAsUser) -}}
        {{- end }}
      containers:
        - name: apiserver-ui
          image: {{template "gloo.image" $uiImage}}
          imagePullPolicy: {{$uiImage.pullPolicy}}
          volumeMounts:
            - name: empty-cache
              mountPath: /var/cache/nginx
            - name: empty-run
              mountPath: /var/run
          ports:
            - name: static
              {{- if .Values.global.glooMtls.enabled }}
              containerPort: 8443
              {{- else }}
              containerPort: 8080
              {{- end }}
              protocol: TCP
          {{- if .Values.apiServer.deployment.ui.resources }}
          resources:
{{ toYaml .Values.apiServer.deployment.ui.resources | indent 12 }}
          {{- end}}
        - name: apiserver
          image: {{template  "gloo.image" $apiServerImage}}
          imagePullPolicy: {{$apiServerImage.pullPolicy}}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: RBAC_NAMESPACED
              value: {{ quote .Values.global.glooRbac.namespaced }}
            - name: GRPC_PORT
              value: '{{ .Values.apiServer.deployment.server.grpcPort }}'
            {{- if $statsConfig.enabled }}
            - name: START_STATS_SERVER
              value: "true"
            {{- end}} {{/* stats */}}
            - name: NO_AUTH
              value: "1"
      {{- if .Values.apiServer.enterprise }}
            - name: GLOO_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.license_secret_name }}
                  key: license-key
      {{- end}} {{/* .Values.apiServer.enterprise */}}
          {{- if .Values.apiServer.deployment.server.resources }}
          resources:
{{ toYaml .Values.apiServer.deployment.server.resources | indent 12}}
          {{- end}}
          ports:
            - name: grpcport
              containerPort: {{.Values.apiServer.deployment.server.grpcPort}}
              protocol: TCP
        - name: gloo-grpcserver-envoy
          securityContext:
            runAsUser: 101
          env:
            {{/* Prevents Envoy from trying to chown things away from default user 101 */}}
            - name: ENVOY_UID
              value: "0"
          image: {{template "gloo.image" $envoyImage}}
          imagePullPolicy: {{ $envoyImage.pullPolicy }}
          {{- if $envoy.resources }}
          resources:
{{ toYaml $envoy.resources | indent 12}}
          {{- end}}
          readinessProbe:
            httpGet:
              path: /
            {{- if or .Values.global.glooMtls.enabled .Values.apiServer.sslSecretName }}
              port: 8443
              scheme: HTTPS
            {{- else }}
              port: 8080
            {{- end }} {{/* .Values.global.glooMtls.enabled */}}
            periodSeconds: 10
            initialDelaySeconds: 5
          volumeMounts:
          - name: envoy-config
            mountPath: /etc/envoy
            readOnly: true
        {{- if $.Values.apiServer.sslSecretName }}
          - mountPath: /etc/apiserver/ssl
            name: apiserver-ssl-certs
            readOnly: true
        {{- end }}    
        {{- if .Values.global.glooMtls.enabled }}
          - mountPath: /etc/envoy/ssl
            name: gloo-mtls-certs
            readOnly: true
        {{- end }} {{/* .Values.global.glooMtls.enabled */}}
        {{- if .Values.global.glooMtls.enabled }}
        {{- $sdsImage := merge .Values.global.glooMtls.sds.image .Values.global.image }}
        - name: sds
          image: {{ template "gloo.image" $sdsImage }}
          imagePullPolicy: {{ $sdsImage.pullPolicy }}
          env:
            - name: GLOO_MTLS_SDS_ENABLED
              value: "true"
          volumeMounts:
            - mountPath: /etc/envoy/ssl
              name: gloo-mtls-certs
              readOnly: true
          {{- if $.Values.global.glooMtls.sdsResources }}
          resources:
{{ toYaml $.Values.global.glooMtls.sdsResources | indent 12}}
          {{- end}}
        {{- end }} {{/* .Values.global.glooMtls.enabled */}}
      volumes:
        - name: empty-cache
          emptyDir: {}
        - name: empty-run
          emptyDir: {}
        - name: envoy-config
          configMap:
            name: {{ $envoy.bootstrapConfig.configMapName }}
      {{- if $.Values.apiServer.sslSecretName }}
        - name: apiserver-ssl-certs
          secret:
            defaultMode: 420
            secretName: {{ $.Values.apiServer.sslSecretName }}
      {{- end }}    
      {{- if $.Values.global.glooMtls.enabled }}
        - name: gloo-mtls-certs
          secret:
            defaultMode: 420
            secretName: gloo-mtls-certs
      {{- end }} {{/* .Values.global.glooMtls.enabled */}}
      {{- include "gloo.pullSecret" $apiServerImage | nindent 6}}
{{- end }} {{/* .Values.apiServer.enable */}}
